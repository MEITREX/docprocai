# Path to a directory containing the json files to be processed.
in_dir: C:/Users/lukas/Desktop/GITS/docprocai-training-private/datasets/dataset-titles-full/raw_data
# Path to the output json file.
out_file: C:/Users/lukas/Desktop/GITS/docprocai-training-private/datasets/dataset-titles-full/dataset-titles-full-sliding.json
# Maximum number of characters (not tokens!) in a single training prompt, before it is split into 2.
max_prompt_length: 20000
sliding_step: 3
# Fraction of the data to be used for evaluation.
eval_split: 0.0
# Path to the output json file for evaluation data.
eval_out_file: ./path/to/eval_output.json
# Output format of the training data. Allowed values: [alpaca, full]
# In Alpaca mode: The output is a JSON file with an array of training data objects, each containing the keys "instruction", "input", and "output".
# In Full mode: The output is a JSON file with an array of training data objects, each containing only the key "text", which contains the full training prompt.
format: alpaca
# The prompt template to be used for generating the training data. In Alpaca mode, this should just contain the instruction and input text. In Full
# mode, the prompt should also contain the control tokens of the LLMs prompt template, e.g. stopping tokens, separator tokens, etc.
# Available placeholders: "{json_input}", "{json_output}"
# In Alpaca mode, json_output will automatically be set to the expected model output, so its placeholder does not have to be used in the prompt template.
prompt: |
  I have an input JSON file I need to process. It contains an array, where each element is a snippet of a lecture video. Each element contains the keys "start_time", which denotes the start time of the snippet in seconds after video start, a "transcript" of the spoken text, and "screen_text", the text on screen as detected by OCR. The transcript and screen_text might contain inaccuracies due to the nature of STT and OCR. The video was split into snippets by detecting when the screen changes by a significant amount. Please create a JSON object which contains a property for each segment in the input, where the property key is the start_time of the segment, and the value is a string containing your suggested title for that segment. Choose high-quality and concise titles. If you want two back-to-back snippet to be considered as the same chapter, give them the same title in your JSON array. Remember to answer only with a JSON file. This is the input JSON:

  ```
  {json_input}
  ```